@using Amazon.Lambda.TestTool.Runtime;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject LocalLambdaOptions LambdaOptions
@inject ProtectedLocalStorage BrowserStorage

<!-- Select Template File and Function Handler -->
<div class="row">
    <div class="col-sm form-group">
        <label class="col-xs-3 control-label" for="config-file">Template</label>
        <div class="col-xs-5">
            <select class="form-control" @bind="TemplateFile">
                @foreach (var file in @LambdaOptions.TemplateFiles)
                {
                    <option value="@file">@System.IO.Path.GetFileName(file)</option>
                }
            </select>
        </div>
    </div>
    <div class="col-sm form-group">
        <label class="col-xs-3 control-label" for="functions-picker">Function</label>
        <div class="col-xs-5">
            <select class="form-control" name="color" @bind="FunctionHandler">
                @if (AvailableFunctions != null)
                {
                    @foreach (var function in AvailableFunctions)
                    {
                        <option value="@function.FunctionInfo.Handler">@function.FunctionInfo.Name</option>
                    }
                }
            </select>
        </div>
    </div>
</div>

<!-- Select Profile and Region -->
<div class="row">
    <div class="col-sm form-group" for="functions-picker">
        <label class="col-xs-3 control-label" for="aws-profile">AWS Credential Profile</label>
        <select id="aws-profile" class="form-control" @bind="AWSProfile">
            @if (AvailableAWSProfiles != null)
            {
                @foreach (var profile in @AvailableAWSProfiles)
                {
                    <option value="@profile">@profile</option>
                }
            }
        </select>
    </div>
    <div class="col-sm form-group" for="aws-region">
        <label class="col-xs-3 control-label">AWS Region</label>
        <input id="aws-region" type="text" class="form-control"  @bind="AWSRegion"/>
    </div>
</div>

<!-- TODO: Add ability to set environment variables -->

@code {

    string _awsProfile = "default";
    public string AWSProfile
    {
        get => this._awsProfile;
        set
        {
            this._awsProfile = value;
            BrowserStorage.SetAsync("profile", value);
            Console.WriteLine($"profile =  {value}");
            OnChangeAsync?.Invoke();
        }
    }

    string _awsRegion = "us-east-1";
    public string AWSRegion
    {
        get => this._awsRegion;
        set
        {
            this._awsRegion = value;
            BrowserStorage.SetAsync("region", value);
            Console.WriteLine($"region =  {value}");
            OnChangeAsync?.Invoke();
        }
    }

    public Func<Task> OnChangeAsync { get; set; }

    private string _templateFile;
    public string TemplateFile
    {
        get => this._templateFile;
        set
        {
            this._templateFile = value;
            BrowserStorage.SetAsync("template", value);
            Console.WriteLine($"template =  {value}");
            UpdateTemplateFileChange();

            OnChangeAsync?.Invoke();
        }
    }

    string _functionHandler;
    public string FunctionHandler
    {
        get => this._functionHandler;
        set
        {
            this._functionHandler = value;
            BrowserStorage.SetAsync("function", value);
            Console.WriteLine($"function =  {value}");
            OnChangeAsync?.Invoke();
        }
    }

    IList<string> AvailableAWSProfiles;


    IList<LambdaFunction> AvailableFunctions;

    protected override async Task OnInitializedAsync()
    {
        AvailableAWSProfiles = this.LambdaOptions.LambdaRuntime.AWSService.ListProfiles();

        if (!string.IsNullOrEmpty(LambdaOptions.DefaultAWSProfile) && this.AvailableAWSProfiles.Contains(LambdaOptions.DefaultAWSProfile))
        {
            this.AWSProfile = LambdaOptions.DefaultAWSProfile;
        }
        else
        {
            var profileFromBrowserStorage = await BrowserStorage.GetAsync<string>("profile");
            if (profileFromBrowserStorage.Success && this.AvailableAWSProfiles.Contains(profileFromBrowserStorage.Value))
                this.AWSProfile = profileFromBrowserStorage.Value;
        }

        if (!string.IsNullOrEmpty(LambdaOptions.DefaultAWSRegion))
        {
            this.AWSRegion = LambdaOptions.DefaultAWSRegion;
        }
        else
        {
            var regionFromBrowserStorage = await BrowserStorage.GetAsync<string>("region");
            if (regionFromBrowserStorage.Success)
                this.AWSRegion = regionFromBrowserStorage.Value;
        }

        var functionFromBrowserStorage = await BrowserStorage.GetAsync<string>("function");
        if (functionFromBrowserStorage.Success)
            this.FunctionHandler = functionFromBrowserStorage.Value;

        var defaultTemplateFile = LambdaOptions.TemplateFiles.FirstOrDefault(x =>
            string.Equals(LambdaOptions.DefaultTemplateFile, x, StringComparison.OrdinalIgnoreCase) ||
            string.Equals(LambdaOptions.DefaultTemplateFile, System.IO.Path.GetFileName(x), StringComparison.OrdinalIgnoreCase));

        if (!string.IsNullOrEmpty(defaultTemplateFile))
        {
            this.TemplateFile = defaultTemplateFile;
        }
        else 
        {
            var templateFromBrowserStorage = await BrowserStorage.GetAsync<string>("template");
            if (templateFromBrowserStorage.Success && LambdaOptions.TemplateFiles.Contains(templateFromBrowserStorage.Value))
                this.TemplateFile = templateFromBrowserStorage.Value;
            else if (LambdaOptions.TemplateFiles.Count > 0)
                this.TemplateFile = LambdaOptions.TemplateFiles[0];
        }
    }

    void UpdateTemplateFileChange()
    {
        var functionsInfo = LambdaTemplateFileParser.LoadLambdaFunctionsInfoFromTemplate(this.TemplateFile);
        AvailableFunctions = this.LambdaOptions.LambdaRuntime.LoadLambdaFunctions(functionsInfo);

        if (this.AvailableFunctions.FirstOrDefault(x => x.FunctionInfo?.Handler == this.FunctionHandler) == null)
            this.FunctionHandler = this.AvailableFunctions.First()?.FunctionInfo?.Handler;

        this.StateHasChanged();
    }
}
